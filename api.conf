location /views/ {
    if ($request_method = OPTIONS ) {
        add_header Access-Control-Allow-Origin "$http_origin";
        add_header Access-Control-Allow-Methods "GET, OPTIONS, POST";
        add_header Access-Control-Allow-Headers "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type";
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Max-Age "1728000";
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
    }

    content_by_lua_block {
        -- global config
        local GLOBAL_TEASER_STAT_TTL = 3600
        local GLOBAL_USER_STAT_TTL = 604800
        local GLOBAL_MAX_VIEWS = 5
        -- check params
        local teasers = ngx.var.arg_tid
        if teasers == nil then
            ngx.exit(400)
        end
        -- include redis
        local redis = require "resty.redis"
        -- include md5
        local resty_md5 = require "resty.md5"
        local md5 = resty_md5:new()
        if not md5 then
            ngx.exit(500)
        end
        -- include string
        local resty_string = require "resty.string"
        -- redis connect
        local red = redis:new()
        red:set_timeout(1000) -- 1 sec
        local ok = red:connect("127.0.0.1", 6379)
        if not ok then
            ngx.exit(500)
        end
        -- redis select db
        red:select(2)
        -- calc user hash
        local real_ip = ngx.var.remote_addr
        if ngx.var.http_x_forwarded_for ~= ngx.null then
            local real_ip = ngx.var.http_x_forwarded_for
        end
        local headers = ngx.req.get_headers()
        local ua = headers["User-Agent"]
        local ref = ngx.var.http_referer
        if ua == nil then
            ua = ''
        end
        if ref == nil then
            ref = ''
        end
        if ua[0] then ua = ua[0] end
        local rdomain = ref:match('^%w+://([^/]+)')
        md5:update(real_ip .. ua .. rdomain)
        local uid = resty_string.to_hex(md5:final())

        -- get local time
        local ts = os.date("*t")
        -- get teasers ids
        local key
        local cn
        for tid in string.gmatch(teasers, '([^|]+)') do
            -- increment teaser views
            key = "teasers:" .. tid .. ":views:" .. ts.min

            cn = red:incr(key)
            if tonumber(cn) == 1 then
                red:expire(key, GLOBAL_TEASER_STAT_TTL)
            end
            -- increment user views
            key = "users:" .. uid .. ":views:" .. tid
            cn = red:incr(key)
            if tonumber(cn) == 1 then
                red:expire(key, GLOBAL_USER_STAT_TTL)
            else
                if tonumber(cn) >= GLOBAL_MAX_VIEWS then
                    key = "users:" .. uid .. ":clicks:" .. tid
                    red:setex(key, GLOBAL_USER_STAT_TTL, 0)
                end
            end
        end
        ngx.exit(200)
    }

    add_header 'Access-Control-Allow-Origin' '$http_origin';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
}

location /click/ {
    rewrite /click/(.*)/(.*)$ /internal/click/?tid=$1&h=$2 last;
}

location /internal/click/ {
    content_by_lua_block {
        -- global config
        local GLOBAL_TEASER_STAT_TTL = 3600
        local GLOBAL_USER_STAT_TTL = 604800
        local GLOBAL_GEO = {BY = "BEL+UKR", KZ = "CIS", RU = "RUS", UA = "BEL+UKR", UZ = "CIS"}
        local GLOBAL_LANDING_URL = "https://yourdomain.tld/landing.html"
        local GLOBAL_HASH_SECRET = "aTmt9gm9dK3Sd53I1tWi"
        local GLOBAL_HASH_TTL = 3600
        local GLOBAL_AGENT_URL = "yourdomain.tld"
        local GLOBAL_AGENT_ID = "0"

        -- check params
        local tid = ngx.var.arg_tid
        if tid == nil then
            ngx.exit(400)
        end
        local hash = ngx.var.arg_h
        if hash == nil then
            ngx.exit(400)
        end
        -- include redis
        local redis = require "resty.redis"
        -- include md5
        local resty_md5 = require "resty.md5"
        local md5 = resty_md5:new()
        if not md5 then
            ngx.exit(500)
        end
        -- include string
        local resty_string = require "resty.string"
        -- redis connect
        local red = redis:new()
        red:set_timeout(1000) -- 1 sec
        local ok = red:connect("127.0.0.1", 6379)
        if not ok then
            ngx.exit(500)
        end
        -- redis select db
        red:select(2)
        -- generate redirect hash
        md5:update(tid .. hash .. GLOBAL_HASH_SECRET)
        local rhash = resty_string.to_hex(md5:final())

        -- security check
        local gh = red:exists("secure:" .. hash)
        if tonumber(gh) == 0 then
            -- click doesnt count -> redirect
            return ngx.redirect(GLOBAL_LANDING_URL .. '#t=' .. tid .. '&h=' .. rhash)
        end
        -- calc user hash
        local real_ip = ngx.var.remote_addr
        if ngx.var.http_x_forwarded_for ~= ngx.null then
            local real_ip = ngx.var.http_x_forwarded_for
        end
        local headers = ngx.req.get_headers()
        local ua = headers["User-Agent"]
        local ref = ngx.var.http_referer
        if ua == nil then
            ua = ''
        end
        if ref == nil then
            ref = ''
        end
        if ua[0] then ua = ua[0] end
        local rdomain = ref:match('^%w+://([^/]+)')
        md5 = resty_md5:new()
        md5:update(real_ip .. ua .. rdomain)
        local uid = resty_string.to_hex(md5:final())

        -- get local time
        local ts = os.date("*t")
        -- get teasers ids
        local key
        local cn
        -- increment teaser clicks
        key = "teasers:" .. tid .. ":clicks:" .. ts.min
        cn = red:incr(key)
        if tonumber(cn) == 1 then
            red:expire(key, GLOBAL_TEASER_STAT_TTL)
        end
        -- increment user clicks
        key = "users:" .. uid .. ":clicks:" .. tid
        red:setex(key, GLOBAL_USER_STAT_TTL, 1)
        -- geo
        local geo = "ALL"
        if ngx.var.http_cf_ipcountry ~= nil then
            if GLOBAL_GEO[ngx.var.http_cf_ipcountry] ~= nil then
                geo = GLOBAL_GEO[ngx.var.http_cf_ipcountry]
            end
        else
            if GLOBAL_GEO[ngx.var.geoip_country_code] ~= nil then
                geo = GLOBAL_GEO[ngx.var.geoip_country_code]
            end
        end
        -- increment site incoming stat
        key = "sites:" .. rdomain .. ":" .. geo .. ":in"
        red:incr(key)
        -- remove secure hash
        red:del("secure:" .. hash)
        -- save redirect hash
        red:setex("secure:" .. rhash, GLOBAL_HASH_TTL, "")
        -- redirect
        return ngx.redirect(GLOBAL_LANDING_URL .. '#t=' .. tid .. '&h=' .. GLOBAL_AGENT_ID .. '.' .. rhash)
    }
}

location /go/ {
    rewrite /go/(.*)/(.*)$ /internal/go/?tid=$1&h=$2 last;
}

location /internal/go/ {
    content_by_lua_block {
        -- global config
        local GLOBAL_TEASER_STAT_TTL = 3600
        local GLOBAL_GEO = {BY = "BEL+UKR", KZ = "CIS", RU = "RUS", UA = "BEL+UKR", UZ = "CIS"}

        -- check params
        local tid = ngx.var.arg_tid
        if tid == nil then
            ngx.exit(400)
        end
        local hash = ngx.var.arg_h

        -- include redis
        local redis = require "resty.redis"
        -- include json
        local cjson = require("cjson")
        -- redis connect
        local red = redis:new()
        red:set_timeout(1000) -- 1 sec
        local ok = red:connect("127.0.0.1", 6379)
        if not ok then
            ngx.exit(500)
        end
        -- redis select db
        red:select(2)
        -- get teaser info
        local tdata = red:get("cache:" .. tid)
        if not tdata then
            ngx.exit(404)
        end
        local teaser = cjson.decode(tdata)

        -- security check
        local gh = red:exists("secure:" .. hash)
        if tonumber(gh) == 0 then
            -- click doesnt count -> redirect
            return ngx.redirect(teaser.url)
        end
        -- get go domain
        local rdomain = teaser.url:match('^%w+://([^/]+)')

        -- get local time
        local ts = os.date("*t")
        -- statistics
        local key
        local cn
        -- increment teaser go
        key = "teasers:" .. tid .. ":go:" .. ts.min
        cn = red:incr(key)
        if tonumber(cn) == 1 then
            red:expire(key, GLOBAL_TEASER_STAT_TTL)
        end
        -- geo
        local geo = "ALL"
        if ngx.var.http_cf_ipcountry ~= nil then
            if GLOBAL_GEO[ngx.var.http_cf_ipcountry] ~= nil then
                geo = GLOBAL_GEO[ngx.var.http_cf_ipcountry]
            end
        else
            if GLOBAL_GEO[ngx.var.geoip_country_code] ~= nil then
                geo = GLOBAL_GEO[ngx.var.geoip_country_code]
            end
        end
        -- increment site incoming stat
        key = "sites:" .. rdomain .. ":" .. geo .. ":out"
        red:incr(key)
        -- remove secure hash
        red:del("secure:" .. hash)
        -- redirect
        return ngx.redirect(teaser.url)
    }
}

location /get/ {
    rewrite /get/(.*)/(.*)/$ /internal/get/?tid=$1&h=$2&r=$arg_related&n=$arg_count last;
}

location /internal/get/ {
    add_header Content-Type "application/json; charset=UTF-8";
    if ($request_method = OPTIONS ) {
        add_header Access-Control-Allow-Origin "$http_origin";
        add_header Access-Control-Allow-Methods "GET, OPTIONS, POST";
        add_header Access-Control-Allow-Headers "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type";
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Max-Age "1728000";
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
    }

    content_by_lua_block {
        -- global config
        local GLOBAL_STATIC_URL = "https://static.yourdomain.tld"
        local GLOBAL_AGENT_URL = "//yourdomain.tld"
        -- check params
        local tid = ngx.var.arg_tid
        if tid == nil then
            ngx.exit(400)
        end
        -- include json
        local cjson = require("cjson")
        -- include redis
        local redis = require "resty.redis"
        -- redis connect
        local red = redis:new()
        red:set_timeout(1000) -- 1 sec
        local ok = red:connect("127.0.0.1", 6379)
        if not ok then
            ngx.exit(500)
        end
        -- redis select db
        red:select(2)
        -- get teaser info
        local tdata = red:get("cache:" .. tid)
        if tdata == ngx.null then
            ngx.exit(404)
        end
        local teaser = cjson.decode(tdata)

        if ngx.var.arg_r ~= nil then
            local n = 10
            if ngx.var.arg_n ~= nil then
                n = tonumber(ngx.var.arg_n)
            end
            local related = {}
            if teaser.category ~= nil then
                local tdata = red:get("cache:category:" .. teaser.category)
                if tdata ~= ngx.null then
                    related = cjson.decode(tdata)
                    local function sliceTable(t, first, last)
                      local sub = {}
                      for i=first,last do
                        sub[#sub + 1] = t[i]
                      end
                      return sub
                    end
                    related = sliceTable(related, 0, n)
                end
            end
            ngx.say(cjson.encode({id = teaser.hash, title = teaser.title, lead = teaser.lead, url = GLOBAL_AGENT_URL .. '/go/' .. tid .. '/' .. ngx.var.arg_h, img = GLOBAL_STATIC_URL .. '/' .. tid, related = related}))
        else
            ngx.say(cjson.encode({id = teaser.hash, title = teaser.title, lead = teaser.lead, url = GLOBAL_AGENT_URL .. '/go/' .. tid .. '/' .. ngx.var.arg_h, img = GLOBAL_STATIC_URL .. '/' .. tid}))
        end
    }
    add_header 'Access-Control-Allow-Origin' '$http_origin';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
}

location /load/ {
    rewrite /load/(.*)/(.*)/(.*)$ /internal/load/?h=$1&n=$2&r=$3 last;
}

location /internal/load/ {
    add_header Content-Type "application/json; charset=UTF-8";
    if ($request_method = OPTIONS ) {
        add_header Access-Control-Allow-Origin "$http_origin";
        add_header Access-Control-Allow-Methods "GET, OPTIONS, POST";
        add_header Access-Control-Allow-Headers "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type";
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Max-Age "1728000";
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
    }
    content_by_lua_block {
        -- global config
        local GLOBAL_HASH_SECRET = "aTmt9gm9dK3Sd53I1tWi"
        local GLOBAL_HASH_TTL = 3600
        local GLOBAL_STATIC_URL = "https://static.yourdomain.tld"
        local GLOBAL_AGENT_URL = "//static.yourdomain.tld"
        local GLOBAL_GEO = {BY = "BEL+UKR", KZ = "CIS", RU = "RUS", UA = "BEL+UKR", UZ = "CIS"}

        -- include md5
        local resty_md5 = require "resty.md5"
        local md5 = resty_md5:new()
        if not md5 then
            ngx.exit(500)
        end
        -- include string
        local resty_string = require "resty.string"

        -- check params
        local hash = ngx.var.arg_h
        if hash == nil then
            ngx.say('[]')
            ngx.exit(200)
        end
        -- get referer
        local ref = ngx.var.http_referer
        if ref == nil then
            ref = ''
        end
        local rdomain = ref:match('^%w+://([^/]+)')
        if rdomain == nil then
            rdomain = ''
        end
        md5:update(rdomain .. GLOBAL_HASH_SECRET)
        if resty_string.to_hex(md5:final()) ~= hash then
            ngx.say('[]')
            ngx.exit(200)
        end

        local count = tonumber(ngx.var.arg_n)
        if count == nil or count == 0 then
            ngx.say('[]')
            ngx.exit(200)
        end
        local recycling = tonumber(ngx.var.arg_r)
        if recycling == nil then
            recycling = 0
        end
        -- include redis
        local redis = require "resty.redis"
        -- include json
        local cjson = require("cjson")

        -- redis connect
        local red = redis:new()
        red:set_timeout(1000) -- 1 sec
        local ok = red:connect("127.0.0.1", 6379)
        if not ok then
            ngx.exit(500)
        end
        -- redis select db
        red:select(2)
        -- calc user hash
        local real_ip = ngx.var.remote_addr
        if ngx.var.http_x_forwarded_for ~= ngx.null then
            local real_ip = ngx.var.http_x_forwarded_for
        end
        local headers = ngx.req.get_headers()
        local ua = headers["User-Agent"]
        if ua == nil then
            ua = ''
        end
        if ua[0] then ua = ua[0] end
        md5 = resty_md5:new()
        md5:update(real_ip .. ua .. rdomain)
        local uid = resty_string.to_hex(md5:final())
        -- geo
        local geo = "ALL"
        if ngx.var.http_cf_ipcountry ~= nil then
            if GLOBAL_GEO[ngx.var.http_cf_ipcountry] ~= nil then
                geo = GLOBAL_GEO[ngx.var.http_cf_ipcountry]
            end
        else
            if GLOBAL_GEO[ngx.var.geoip_country_code] ~= nil then
                geo = GLOBAL_GEO[ngx.var.geoip_country_code]
            end
        end
        -- get teasers
        -- local tdata = red:get("users:" .. uid)
        local tdata = red:get("cache:" .. geo)
        if tdata == ngx.null then
            tdata = red:get("cache:" .. geo)
            if tdata == ngx.null then
                ngx.say('[]')
                ngx.exit(200)
            end
        end
        local teasers = cjson.decode(tdata)
        local out = {}
        local cout = {}
        local rout = {}
        local r = false
        local c
        local chash
        local rn = count*recycling/100
        local cn = count - rn
        local th
        for tpos,teaser in pairs(teasers) do
            if #cout >= cn*2 and #rout >= rn*2 then
                break
            end
            th = red:exists("users:" .. uid .. ":clicks:" .. teaser.hash)
            if tonumber(th) == 0 then
                c = true
                if teaser.url ~= '' then
                    if teaser.url:match('^%w+://([^/]+)') == rdomain then
                        -- recycling
                        if #rout >= rn*2 then
                            c = false
                        end
                        r = true
                    else
                        -- not recycling
                        if #cout >= cn*2 then
                            c = false
                        end
                        r = false
                    end
                    if c then
                        md5:update(teaser.hash .. GLOBAL_HASH_SECRET)
                        chash = resty_string.to_hex(md5:final())
                        -- save click hash
                        red:setex("secure:" .. chash, GLOBAL_HASH_TTL, "")
                        if r then
                            table.insert(rout, {id = teaser.hash, title = teaser.title, lead = teaser.lead, url = GLOBAL_AGENT_URL .. '/click/' .. teaser.hash .. '/' .. chash, img = GLOBAL_STATIC_URL .. '/' .. teaser.hash})
                        else
                            table.insert(cout, {id = teaser.hash, title = teaser.title, lead = teaser.lead, url = GLOBAL_AGENT_URL .. '/click/' .. teaser.hash .. '/' .. chash, img = GLOBAL_STATIC_URL .. '/' .. teaser.hash})
                        end
                    end
                end
            else
                -- exclude teaser
                table.remove(teasers, tpos)
            end
        end
        math.randomseed( os.time() )
        -- Table functions
        local function shuffleTable(t)
            local rand = math.random
            assert( t, "shuffleTable() expected a table, got nil" )
            local iterations = #t
            local j

            for i = iterations, 2, -1 do
                j = rand(i)
                t[i], t[j] = t[j], t[i]
            end
        end
        local function mergeTables(t1, t2)
            for i=1,#t2 do
                t1[#t1+1] = t2[i]
            end
            return t1
        end
        local function sliceTable(t, first, last)
          local sub = {}
          for i=first,last do
            sub[#sub + 1] = t[i]
          end
          return sub
        end
        -- shuffle rout
        if #rout > 0 then
            shuffleTable(rout)
            -- slice
            rout = sliceTable(rout, 0, rn)
        end
        -- shuffle cout
        if #cout > 0 then
            shuffleTable(cout)
            if #rout < rn then
                cn = cn + rn - #rout
            end
            -- slice
            cout = sliceTable(cout, 0, cn)
        end

        -- merge cout + rout
        out = mergeTables(cout, rout)
        -- shuffle out
        shuffleTable(out)
        -- cache results
        -- red:setex("users:" .. uid, GLOBAL_HASH_TTL, cjson.encode(teasers))
        -- out
        ngx.say(cjson.encode(out))
    }

    add_header 'Access-Control-Allow-Origin' '$http_origin';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
}

location /js/ {
    add_header Content-Type "application/javascript; charset=UTF-8";
     content_by_lua_block {
        -- global config
        local GLOBAL_HOSTS = "['yourdomain.tld']"

        -- include md5
        local resty_md5 = require "resty.md5"
        local md5 = resty_md5:new()
        if not md5 then
            ngx.exit(500)
        end
        -- include string
        local resty_string = require "resty.string"
        -- get referer
        local ref = ngx.var.http_referer
        if ref == nil then
            ref = ''
        end
        local rdomain = ref:match('^%w+://([^/]+)')
        if rdomain == nil then
            rdomain = ''
        end
        -- calc user hash
        local real_ip = ngx.var.remote_addr
        if ngx.var.http_x_forwarded_for ~= ngx.null then
            local real_ip = ngx.var.http_x_forwarded_for
        end
        local headers = ngx.req.get_headers()
        local ua = headers["User-Agent"]
        if ua == nil then
            ua = ''
        end
        if ua[0] then ua = ua[0] end
        md5 = resty_md5:new()
        md5:update(real_ip .. ua .. rdomain)
        local uid = resty_string.to_hex(md5:final())
        -- GET AND SUBSTITUTE
        local res = ngx.location.capture("/internal/js/")
        if res then
            res.body = string.gsub(res.body, "GLOBAL_UID", uid)
            res.body = string.gsub(res.body, "GLOBAL_HOSTS", GLOBAL_HOSTS)
            ngx.say(res.body)
        end
     }
}

location /internal/js/ {
    index teasers.js;
    alias /home/web/yourdomain.tld/htdocs/admin/agent/;
}
